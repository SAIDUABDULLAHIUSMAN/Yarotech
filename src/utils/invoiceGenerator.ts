import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

interface CompanySettings {
  company_name: string;
  address: string;
  email: string;
  phone: string;
  currency_symbol: string;
}

interface SaleItem {
  product_name: string;
  quantity: number;
  unit_price: number;
  total_price: number;
}

interface Sale {
  id: string;
  customer_name: string;
  issuer_name: string;
  total_amount: number;
  created_at: string;
  items: SaleItem[];
}

export async function generateInvoicePDF(
  sale: Sale,
  companySettings: CompanySettings
): Promise<jsPDF> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.text(companySettings.company_name, pageWidth / 2, 20, { align: 'center' });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(companySettings.address, pageWidth / 2, 28, { align: 'center' });
  doc.text(
    `Email: ${companySettings.email} | Phone: ${companySettings.phone}`,
    pageWidth / 2,
    34,
    { align: 'center' }
  );

  doc.setLineWidth(0.5);
  doc.line(10, 38, pageWidth - 10, 38);

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(16);
  doc.text('INVOICE', 10, 48);

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(`Invoice ID: ${sale.id.substring(0, 8).toUpperCase()}`, 10, 56);
  doc.text(
    `Date: ${format(new Date(sale.created_at), 'dd MMMM yyyy, hh:mm A')}`,
    10,
    62
  );
  doc.text(`Customer: ${sale.customer_name}`, 10, 68);
  doc.text(`Issued by: ${sale.issuer_name}`, 10, 74);

  const tableData = sale.items.map((item) => [
    item.quantity,
    item.product_name,
    `${companySettings.currency_symbol}${item.unit_price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
    `${companySettings.currency_symbol}${item.total_price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
  ]);

  autoTable(doc, {
    startY: 82,
    head: [['Qty', 'Item Name', 'Unit Price', 'Total']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246],
      textColor: 255,
      fontStyle: 'bold',
    },
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    columnStyles: {
      0: { cellWidth: 20 },
      1: { cellWidth: 80 },
      2: { cellWidth: 40, halign: 'right' },
      3: { cellWidth: 40, halign: 'right' },
    },
  });

  const finalY = (doc as any).lastAutoTable.finalY || 82;

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text(
    `Grand Total: ${companySettings.currency_symbol}${sale.total_amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
    pageWidth - 10,
    finalY + 10,
    { align: 'right' }
  );

  doc.setLineWidth(0.5);
  doc.line(10, finalY + 15, pageWidth - 10, finalY + 15);

  doc.setFont('helvetica', 'italic');
  doc.setFontSize(10);
  doc.text('Thank you for your purchase!', pageWidth / 2, finalY + 25, {
    align: 'center',
  });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(8);
  doc.text(
    `Generated by: ${sale.issuer_name}`,
    pageWidth / 2,
    finalY + 32,
    { align: 'center' }
  );

  return doc;
}