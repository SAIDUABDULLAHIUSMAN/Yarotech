import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

interface CompanySettings {
  company_name: string;
  address: string;
  email: string;
  phone: string;
  currency_symbol: string;
}

interface SaleItem {
  product_name: string;
  quantity: number;
  unit_price: number;
  total_price: number;
}

interface Sale {
  id: string;
  customer_name: string;
  issuer_name: string;
  total_amount: number;
  created_at: string;
  items: SaleItem[];
}

export async function generateInvoicePDF(
  sale: Sale,
  companySettings: CompanySettings
): Promise<jsPDF> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  // Currency formatter
  const formatCurrency = (value: number) =>
    `${companySettings.currency_symbol}${value.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    })}`;

  // Company Header
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(22);
  doc.text(companySettings.company_name, pageWidth / 2, 20, { align: 'center' });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  doc.text(companySettings.address, pageWidth / 2, 28, { align: 'center' });
  doc.text(
    `Email: ${companySettings.email} | Phone: ${companySettings.phone}`,
    pageWidth / 2,
    34,
    { align: 'center' }
  );

  doc.setLineWidth(0.5);
  doc.line(10, 40, pageWidth - 10, 40);

  // Invoice Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(18);
  doc.text('INVOICE', 10, 52);

  // Invoice Details
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  doc.text(`Invoice ID: ${sale.id.substring(0, 8).toUpperCase()}`, 10, 62);
  doc.text(
    `Date: ${format(new Date(sale.created_at), 'dd MMMM yyyy, hh:mm a')}`,
    10,
    68
  );
  doc.text(`Customer: ${sale.customer_name}`, 10, 74);
  doc.text(`Issued by: ${sale.issuer_name}`, 10, 80);

  // Table Data
  const tableData = sale.items.map((item) => [
    item.quantity,
    item.product_name,
    formatCurrency(item.unit_price),
    formatCurrency(item.total_price),
  ]);

  autoTable(doc, {
    startY: 90,
    head: [['Qty', 'Item Name', 'Unit Price', 'Total']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246], // blue header
      textColor: 255,
      fontStyle: 'bold',
    },
    styles: {
      fontSize: 11,
      cellPadding: 5,
    },
    alternateRowStyles: { fillColor: [245, 245, 245] }, // light gray rows
    columnStyles: {
      0: { cellWidth: 20, halign: 'center' },
      1: { cellWidth: 80 },
      2: { cellWidth: 40, halign: 'right' },
      3: { cellWidth: 40, halign: 'right' },
    },
  });

  const finalY = (doc as any).lastAutoTable.finalY || 90;

  // Grand Total
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Grand Total:', pageWidth - 90, finalY + 15);
  doc.text(
    formatCurrency(sale.total_amount),
    pageWidth - 20,
    finalY + 15,
    { align: 'right' }
  );

  doc.setLineWidth(0.5);
  doc.line(10, finalY + 20, pageWidth - 10, finalY + 20);

  // Footer
  doc.setFont('helvetica', 'italic');
  doc.setFontSize(11);
  doc.text('Thank you for your purchase!', pageWidth / 2, finalY + 30, {
    align: 'center',
  });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(9);
  doc.text(`Generated by: ${sale.issuer_name}`, pageWidth / 2, finalY + 38, {
    align: 'center',
  });

  return doc;
}
