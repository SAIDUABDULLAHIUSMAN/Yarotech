import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

interface CompanySettings {
  company_name: string;
  address: string;
  email: string;
  phone: string;
  currency_symbol: string;
}

interface SaleItem {
  product_name: string;
  quantity: number;
  unit_price: number;
  total_price: number;
}

interface Sale {
  id: string;
  customer_name: string;
  issuer_name: string;
  total_amount: number;
  created_at: string;
  items: SaleItem[];
}

export async function generateInvoicePDF(
  sale: Sale,
  companySettings: CompanySettings
): Promise<jsPDF> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  // ===== HEADER BAR =====
  doc.setFillColor(59, 130, 246); // soft blue
  doc.rect(0, 0, pageWidth, 25, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(18);
  doc.text(companySettings.company_name, pageWidth / 2, 15, { align: 'center' });

  // ===== CONTACT INFO =====
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(9);
  doc.text(
    `${companySettings.address}`,
    pageWidth / 2,
    30,
    { align: 'center' }
  );
  doc.text(
    `Email: ${companySettings.email} | Phone: ${companySettings.phone}`,
    pageWidth / 2,
    36,
    { align: 'center' }
  );

  // Divider
  doc.setDrawColor(200);
  doc.line(10, 40, pageWidth - 10, 40);

  // ===== INVOICE TITLE =====
  doc.setTextColor(0);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(16);
  doc.text('INVOICE', 10, 50);

  // ===== INVOICE INFO =====
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  const invoiceInfoY = 58;
  doc.text(`Invoice ID: ${sale.id.substring(0, 8).toUpperCase()}`, 10, invoiceInfoY);
  doc.text(`Date: ${format(new Date(sale.created_at), 'dd MMM yyyy, hh:mm a')}`, 10, invoiceInfoY + 6);
  doc.text(`Customer: ${sale.customer_name}`, 10, invoiceInfoY + 12);
  doc.text(`Issued by: ${sale.issuer_name}`, 10, invoiceInfoY + 18);

  // ===== TABLE =====
  const tableData = sale.items.map((item) => [
    item.quantity,
    item.product_name,
    `${companySettings.currency_symbol}${item.unit_price.toLocaleString(undefined, { minimumFractionDigits: 2 })}`,
    `${companySettings.currency_symbol}${item.total_price.toLocaleString(undefined, { minimumFractionDigits: 2 })}`,
  ]);

  autoTable(doc, {
    startY: invoiceInfoY + 26,
    head: [['Qty', 'Item Name', 'Unit Price', 'Total']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245], // soft gray
    },
    styles: {
      fontSize: 10,
      cellPadding: 4,
    },
    columnStyles: {
      0: { cellWidth: 20, halign: 'center' },
      1: { cellWidth: 80 },
      2: { cellWidth: 40, halign: 'right' },
      3: { cellWidth: 40, halign: 'right' },
    },
  });

  const finalY = (doc as any).lastAutoTable.finalY || invoiceInfoY + 26;

  // ===== GRAND TOTAL =====
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.setFillColor(240, 248, 255); // light blue-gray
  doc.rect(pageWidth - 80, finalY + 6, 70, 10, 'F');
  doc.text('Grand Total:', pageWidth - 75, finalY + 13);
  doc.text(
    `${companySettings.currency_symbol}${sale.total_amount.toLocaleString(undefined, { minimumFractionDigits: 2 })}`,
    pageWidth - 15,
    finalY + 13,
    { align: 'right' }
  );

  // Divider line
  doc.setDrawColor(220);
  doc.line(10, finalY + 22, pageWidth - 10, finalY + 22);

  // ===== FOOTER =====
  doc.setFont('helvetica', 'italic');
  doc.setFontSize(10);
  doc.setTextColor(80);
  doc.text('Thank you for your purchase!', pageWidth / 2, finalY + 32, { align: 'center' });
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(8);
  doc.text(`Generated by: ${sale.issuer_name}`, pageWidth / 2, finalY + 38, { align: 'center' });

  return doc;
}
